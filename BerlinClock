import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Pattern;

/*
 * The ClockGenerator runs once, taking in an input from the console in format hh:mm:ss.
 * The time can be any time between 00:00:00 and 24:00:00 inclusive. When given a correctly
 * formatted time, the ClockGenerator will right to the console a string representation of
 * the input time in Berlin Clock format, then exit.
 * If the user enters an invalid input, the ClockGenerator will print an error and exit.
 * If the user types "quit". the program will exit with a goodbye message.
*/

public class ClockGenerator {
	
	public static void main(String[] args) {

		System.out.println("Please enter a time in the format hh:mm:ss between 00:00:00 and 24:00:00 inclusive, or enter \"quit\" to exit.");
	
		Scanner scanner = new Scanner(System.in);
		String input = scanner.nextLine();
		
		if (input.equalsIgnoreCase("quit")) {
			System.out.println("Exiting ClockGenerator.");
			return;
		}
		
		// Check that the input is in a valid format
		String regex = "[0-2][0-9]:[0-5][0-9]:[0-5][0-9]";
		boolean validFormat = Pattern.matches(regex, input);
		if (!validFormat) {
			System.out.println("Your input " + input + " is not in the format hh:mm:ss");
		} else {
			String[] clockStrings = input.split(":");
			int hours = Integer.parseInt(clockStrings[0]);
			int minutes = Integer.parseInt(clockStrings[1]);
			int seconds = Integer.parseInt(clockStrings[2]);
			
			// Check that the maximum time of 24:00:00 is not exceeded
			if (hours > 24 || 
					(hours == 24 && (minutes > 0 || seconds > 0))) {
				System.out.println("Your input " + input + " exceeds the maximum time (24:00:00)");
			} else {
				BerlinClock berlinClock = new BerlinClock(hours, minutes, seconds);
				berlinClock.Display();
			}
		}
	}
}

/*
 * A class to represent a Berlin Clock (a number of rows of lamps, lit left to right,
 * depending on time)
 */
class BerlinClock {
	
	// Contains number of lamps lit per row
	private ArrayList<Integer> litPerRow;
	
	// Contains number of lamps per row
	private ArrayList<Integer> lampsPerRow;
		    	       	
	// Takes in time and sets how many lamps are lit per rows
	public BerlinClock(int hours, int minutes, int seconds) {
		lampsPerRow =  new ArrayList<Integer>(Arrays.asList(
				(Integer)1, (Integer)4,(Integer)4,(Integer)11,(Integer)4));
		litPerRow = new ArrayList<Integer>(); 
		if (seconds % 2 == 0) {
			this.litPerRow.add(1);
		} else {
			this.litPerRow.add(0);
		}
		
		this.litPerRow.add(hours / 5);
		this.litPerRow.add(hours % 5);
		this.litPerRow.add(minutes / 5);
		this.litPerRow.add(minutes % 5);
	}

	// Displays a Berlin clock, with correct colours for different rows and unlit lamps displayed
	public void Display() {
		for (int i = 0; i < litPerRow.size(); i++) {
			String lamps = "";
			
			// Check for any lit lamps and assign colour
			if (i == 0) {
				 lamps = (litPerRow.get(i) == 1) ? "Y" : "O";
			} 
			else if (i == 1 || i == 2) {
				for (int j = 0; j < litPerRow.get(i); j++) {
					lamps += "R";
				}
			} 
			else if (i == 3 || i == 4) {
				for (int j = 0; j < litPerRow.get(i); j++) {
					// Fourth row contains mix of red and yellow lamps
					if (i == 3 && ((j + 1) % 3) == 0)
					{
							lamps += "R";
					} else {
						lamps += "Y";
					}
				}
			}
			
			// Pad with any necessary unlit lamps
			while (lamps.length() < lampsPerRow.get(i)) {
				lamps += "O";
			}
			System.out.println(lamps);
		}
	}
}
